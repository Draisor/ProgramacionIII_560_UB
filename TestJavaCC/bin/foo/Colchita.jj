/**
 * Gramatica del Proyecto C. Tecnicatura en programacion de computadoras - tercer cuatrimestre - 2015.
 */

PARSER_BEGIN(Colchita)
package foo;

import foo.Escribir;
import java.io.*;

public class Colchita
{

  
  public static void main(String args []) throws ParseException
  {
    try    {
        System.out.println("Ingrese un comando: ");	    Colchita analizador = new Colchita(System.in);
	    analizador.principal();
	    System.out.println(analizador.getToken(0));
    }
    catch(ParseException e)    {
      System.out.println("Colchita: Se han encontrado errores en el analisis.");
      System.out.println(e.getMessage());    }
  }
  
}
PARSER_END(Colchita)

TOKEN : /*RETAZOS*/
{
  < RETAZO1 : "retazo1" >{escritor.escribir("retazo1");}
| < RETAZO2 : "retazo2" >{escritor.escribir("retazo2");}
}

TOKEN : /*ENTERO*/
{
  < CONSTANT : (< DIGITO >)+ >{escritor.escribir(""+image);}
| < #DIGITO : [ "0"-"9" ] >
}

TOKEN : /*OPERACIONES*/
{
  < GIRAR : "girar" >{escritor.escribir("girar");}
| < COSER : "coser" >{escritor.escribir("coser");}
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >{escritor.escribir("(");}
| < RPAREN: ")" >{escritor.escribir(")");}
| < COMA: "," >{escritor.escribir(",");}
}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

void principal() :
{}
{
  sentencias()
}

void sentencias() :
{}
{
 (    declaracionLocal()
 )*
}

void declaracionLocal() :
{}
{
  girar()
| coser()
}

void retazos():
{}
{
  < RETAZO1 >< LPAREN >< CONSTANT ><RPAREN >
| < RETAZO2 >< LPAREN >< CONSTANT ><RPAREN >
}


void girar() :
{}
{
  < GIRAR >< LPAREN >(declaracionLocal() | retazos())< RPAREN >
}

void coser() :
{}
{
  < COSER >< LPAREN >(declaracionLocal() | retazos())< COMA >(declaracionLocal() | retazos())< RPAREN >
}